AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  meeting-room-notify
  SAM Template for meeting-room-notify that has the DynamoDB table and
  Lambda functions needed to demonstrate the Websocket protocol on API Gateway.

Parameters:
  ProjectName:
    Type: String
    Default: meeting-room-notify
  StackName:
    Type: String
    Default: meeting-room-notify-stack
  StageName:
    Type: String
    Default: dev
  ConnectionTableName:
    Type: String
    Default: "connections"
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: "Required. Can be characters and underscore only. No numbers or special characters allowed."

Globals:
  Function:
    Runtime: go1.x
    Handler: main
    Timeout: 29
    MemorySize: 128
    Environment:
      Variables:
        TZ: Asia/Tokyo
        PROJECT_NAME: !Sub ${ProjectName}

Resources:
  # API Gateway
  WebSocketApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApiGateway
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApiGateway
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApiGateway
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApiGateway
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApiGateway
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApiGateway
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApiGateway
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: !Sub ${StageName} Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApiGateway

  # dynamoDB
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: True
      TableName: !Sub ${ProjectName}-${ConnectionTableName}

  # Lambda function
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/cmd/onconnect
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Sub ${ProjectName}-${ConnectionTableName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ProjectName}-${ConnectionTableName}
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApiGateway
      - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/cmd/ondisconnect
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Sub ${ProjectName}-${ConnectionTableName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ProjectName}-${ConnectionTableName}
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApiGateway
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/cmd/sendmessage
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Sub ${ProjectName}-${ConnectionTableName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ProjectName}-${ConnectionTableName}
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiGateway}/*"
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApiGateway
      - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  IoTMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/cmd/iotmessage
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Sub ${ProjectName}-${ConnectionTableName}
          STACK_NAME: !Ref StackName
          WEB_SOCKET_URI_KEY: WebSocketURI
          IOT_MESSAGE_TABLE_NAME: !Sub ${ProjectName}-iot-message
      Events:
        IoTMessageEvent:
          # Type: Kinesis
          # Properties:
          #   Stream: !GetAtt IoTKinesisStream.Arn
          #   StartingPosition: LATEST
          #   BatchSize: 100
          #   MaximumBatchingWindowInSeconds: 30
          #   Enabled: true
          #   ParallelizationFactor: 1
          #   MaximumRetryAttempts: 0
          #   BisectBatchOnFunctionError: false
          #   MaximumRecordAgeInSeconds: 60
          Type: DynamoDB
          Properties:
            Stream: !GetAtt IoTMessageTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 120
            MaximumBatchingWindowInSeconds: 5
            Enabled: true
            MaximumRetryAttempts: 0
            BisectBatchOnFunctionError: false
            MaximumRecordAgeInSeconds: 60
      Policies:
        - CloudFormationDescribeStacksPolicy: {}
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ProjectName}-${ConnectionTableName}
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ProjectName}-iot-message
        # - KinesisStreamReadPolicy:
        #     StreamName: !GetAtt IoTKinesisStream.Arn
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiGateway}/*"
  IoTMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApiGateway
      - IoTMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IoTMessageFunction
      Principal: kinesis.amazonaws.com

  # IoTKinesisStream:
  #   Type: AWS::Kinesis::Stream
  #   Properties:
  #     ShardCount: 1

  IoTMessageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-iot-message
      AttributeDefinitions:
        - AttributeName: detected_at
          AttributeType: S
      KeySchema:
        - AttributeName: detected_at
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  IoTMessageFunctionArn:
    Description: "IoTMessage function ARN"
    Value: !GetAtt IoTMessageFunction.Arn

  IoTMessageTableArn:
    Description: "IoTMessage table ARN"
    Value: !GetAtt IoTMessageTable.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value:
      !Join [
        "",
        [
          "https://",
          !Ref WebSocketApiGateway,
          ".execute-api.",
          !Ref "AWS::Region",
          ".amazonaws.com/",
          !Ref "Stage",
        ],
      ]
  # IoTKinesisStreamArn:
  #   Description: "IoT KinesisStream ARN"
  #   Value: !GetAtt IoTKinesisStream.Arn
